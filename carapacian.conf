server {
    listen 443 ssl;

    ssl_certificate /etc/ssl/carapacian_com_chain.crt;

    ssl_certificate_key /etc/ssl/carapacian_com.key;

    # TODO We will uncomment this when provide file access via Nginx
    #root /path/to/webroot;

    server_name carapacian.com
    server_name ~^(?<subdomain>.+)\.carapacian\.com$;

    # If no subdomain was found (e.g., 'carapacian.com'), default to 'www'
    if ($subdomain = ''){
        set $subdomain 'www';
    }

    # Set $socket to the socket file. systemd should ensure the existence of a
    # www.sock socket file which should have the main/production Gunicorn
    # process listening and responding to requests. Otherwise, developers will
    # have ticket-sockets to allow the testing of ticket specific environments:
    #
    #     $ticket_id=e7524d86
    #
    #     # The below request would expect there to be a
    #     # '/run/carapacian.com/e7524d86.sock' with a Gunicorn process listening
    #     # and responding to requests.
    #     curl $ticket_id.carapacian.com 
    set $socket /run/carapacian.com/$subdomain.sock;

    # Test for the existence of the socket file
	default_type text/html;
    if (!-x $socket){
        return 502 '<strong>Missing socket: <code>$socket</code></strong>\n';
    }

    # Set the maximum allowed size of the client request body. If
    # the size in a request exceeds the configured value, the 413
    # (Request Entity Too Large) error is returned to the client.
    # Please be aware that browsers cannot correctly display this
    # error. Setting size to 0 disables checking of client request
    # body size. 
    client_max_body_size 4G;

    # Limits the maximum time during which requests can be processed
    # through one keep-alive connection. After this time is reached,
    # the connection is closed following the subsequent request
    # processing. 
    keepalive_timeout 5;

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        location / {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;

            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;

            proxy_pass http://unix:/run/carapacian.com/$subdomain.sock;
        }
    }
}

# Redirect 80 -> 443
server {
     listen 80 deferred;

     server_name carapacian.com www.carapacian.com;

     return 301 https://$host$request_uri;
}

